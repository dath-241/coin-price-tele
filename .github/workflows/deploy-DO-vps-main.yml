name: Deploy to DigitalOcean

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    runs-on: self-hosted  # Use GitHub-hosted runner for tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.20'  # Specify your Go version

      - name: Run unit tests
        run: |
          cd src
          go test -v ./...

      - name: Run E2E tests
        env:
          APP_ID: ${{ secrets.APP_ID }}
          APP_HASH: ${{ secrets.APP_HASH }}
          PHONE_NUMBER: ${{ secrets.PHONE_NUMBER }}
        run: |
          cd src/test
          output=$(go run main.go)
          echo "Output: $output"
          if [[ $output == *"All tests passed"* ]]; then 
            echo "E2E tests passed"
          else
            echo "E2E tests failed"
            exit 1
          fi

  deploy:
    needs: test  # This ensures deploy only runs if tests pass
    runs-on: self-hosted

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Log in to DigitalOcean Container Registry
      - name: Log in to DigitalOcean Container Registry
        env:
          DOCKER_REGISTRY: registry.digitalocean.com/clgslsm
          DOCKER_USERNAME: lam.tran314159@hcmut.edu.vn
          DOCKER_PASSWORD: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        run: |
          echo $DOCKER_PASSWORD | docker login $DOCKER_REGISTRY -u $DOCKER_USERNAME --password-stdin

      # Step 3: Clean up old images in the registry
      - name: Clean up old images
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        run: |
          # Keep the last 3 image tags and delete the rest
          doctl registry repository list-tags clgslsm/coin-price-telegram-bot --format Tag | tail -n +4 | xargs -I {} doctl registry repository delete-tag clgslsm/coin-price-telegram-bot:{}

      # Step 4: Build and push Docker image
      - name: Build and push Docker image
        env:
          DOCKER_REGISTRY: registry.digitalocean.com/clgslsm
        run: |
          docker build -t $DOCKER_REGISTRY/coin-price-telegram-bot:latest .
          docker push $DOCKER_REGISTRY/coin-price-telegram-bot:latest

      # Step 5: Deploy the bot on the self-hosted runner (DigitalOcean droplet)
      - name: Run Docker container
        env:
          DOCKER_REGISTRY: registry.digitalocean.com/clgslsm
        run: |
          # Stop and remove any existing container
          docker stop coin-price-telegram-bot || true
          docker rm coin-price-telegram-bot || true
          
          # Pull the latest version of the image
          docker pull $DOCKER_REGISTRY/coin-price-telegram-bot:latest
          
          # Run the container with necessary configurations
          docker run -d --name coin-price-telegram-bot -p 8443:8443 \
            -e BOT_TOKEN=${{ secrets.BOT_TOKEN }} \
            -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
            -e GO_ENV=production \
            -e PORT=8443 \
            -e WEBHOOK_URL=${{ secrets.WEBHOOK_URL }} \
            -e BOT_USERNAME=${{ secrets.BOT_USERNAME }} \
            -e CMC_API_KEY=${{ secrets.CMC_API_KEY }} \
            $DOCKER_REGISTRY/coin-price-telegram-bot:latest

